#!/usr/bin/env escript
%%
%% ct_auto_run
%% @copyright Daniel Abrahamsson, 2012
%%

-include_lib("kernel/include/file.hrl").

-record(suite, {path,
                mtime,
                dependencies=[]}).
        
-record(module, {name,
                path,
                mtime}).

main([Path|RunCommand]) ->
    case filelib:is_dir(Path) of
        true -> start(Path, string:join(RunCommand, " "));
        false -> io:format("~p is not a directory.~n", [Path])
    end;
main(_) ->
    io:format("Usage:~nct_auto_run <app_path> <run_command>~n").

start(Path, RunCommand) ->
    % Collect suites
    Suites = collect_suites(Path),
    % Collect modules
    Modules = collect_modules(Path),
    % Run initial test with all suites
    SuiteFiles = [P || #suite{path=P} <- Suites],
    run_suites(RunCommand, SuiteFiles),
    % Go into loop
    loop(RunCommand, Modules, Suites).

loop(RunCommand, Modules, Suites) ->
    % Check for changed modules or suites
    {SuitesToRun, UpdatedMods, UpdatedSuites} = suites_to_run(Modules, Suites),
    % Re-run affected suites
    case SuitesToRun of
        [] ->
            sleep(30000);
        _ ->
            run_suites(RunCommand, SuitesToRun)
    end,
    loop(RunCommand, UpdatedMods, UpdatedSuites).

run_suites(_, []) ->
    ok; % Nothing to do...
run_suites(RunCommand, Suites) ->
    FullCommand = RunCommand ++ " " ++ string:join(Suites, " "),
    Port = open_port({spawn, FullCommand}, [stream, exit_status]),
    report_test_run_progress(Port).

report_test_run_progress(Port) ->
    receive
        {Port, {data, Data}} ->
            io:format("~s", [Data]),
            report_test_run_progress(Port);
        {Port, {exit_status, N}} ->
            io:format("Test run exited with status ~p~n", [N]);
        U ->
            io:format("report_test_run_progress: Unexpected message ~p~n", [U])
    end.

suites_to_run(Modules, Suites) ->
    {ModifiedSuites, Suites2} = modified_suites(Suites),
    {ModifiedMods, Mods2} = modified_modules(Modules),
    ReRun = lists:usort(ModifiedSuites++suites_to_rerun(ModifiedMods, Suites2)),
    {ReRun, Mods2, Suites2}.

modified_suites(Suites) ->
    UpdateSuiteInfo = fun(A, B) -> update_suite_info(A, B) end,
    lists:foldl(UpdateSuiteInfo, {[], []}, Suites).

update_suite_info(#suite{path=Path, mtime=MTime}=S, {Modified, AllSuites}) ->
    case mtime(Path) of
        NTime when NTime > MTime ->
            Suite2 = S#suite{mtime=NTime, dependencies=dependencies(Path)},
            {[Path|Modified], [Suite2|AllSuites]};
        _ ->
            {Modified, [S|AllSuites]}
    end.

modified_modules(Modules) ->
    UpdateModInfo = fun(A, B) -> update_module_info(A, B) end,
    lists:foldl(UpdateModInfo, {[], []}, Modules).

update_module_info(#module{name=Name, mtime=MTime}=M, {Modified, AllMods}) ->
    case mtime(M#module.path) of
        NTime when NTime > MTime ->
            {[Name|Modified], [M#module{mtime=NTime}|AllMods]};
        _ ->
            {Modified, [M|AllMods]}
    end.

suites_to_rerun(ModNames, Suites) ->
    DependsOn = fun(D) -> lists:member(D, ModNames) end,
    [Path || #suite{path=Path, dependencies=Deps} <- Suites,
              lists:any(DependsOn, Deps)].

collect_suites(Path) ->
    AddSuite = fun(A, B) -> add_suite(A, B) end,
    filelib:fold_files(Path, "_SUITE.erl$", true, AddSuite, []).

add_suite(SuiteFile, Suites) ->
    MTime = mtime(SuiteFile),
    Deps = dependencies(SuiteFile),
    SuiteInfo = #suite{path=SuiteFile, mtime=MTime, dependencies=Deps},
    [SuiteInfo|Suites].

collect_modules(Path) ->
    AddMod = fun(A, B) -> add_module(A, B) end,
    filelib:fold_files(Path, ".beam$", true, AddMod, []).

add_module(ModFile, Mods) ->
    Name = list_to_atom(filename:basename(ModFile, ".beam")),
    ModInfo = #module{name=Name, path=ModFile, mtime=mtime(ModFile)},
    [ModInfo|Mods].

mtime(File) ->
    {ok, FileInfo} = file:read_file_info(File), % R14B compatibility
    FileInfo#file_info.mtime.

sleep(Time) ->
    receive
    after Time ->
      ok
    end.

dependencies(SuiteFile) ->
    {ok, Epp} = epp:open(SuiteFile, []),
    Forms = get_forms(Epp),
    ok = epp:close(Epp),
    parse_dependencies(Forms).

parse_dependencies(Forms) ->
    lists:usort(lists:flatten(deps(Forms))).

deps({attribute, _, test_source, Deps}) ->
    Deps;
deps({call, _, {remote,_,{atom,_,Mod}, _}, Args})->
    [Mod|deps(Args)];
% Catch all
deps(List) when is_list(List) ->
    [deps(F) || F <- List];
deps(Tuple) when is_tuple(Tuple) ->
    deps(tuple_to_list(Tuple));
deps(Any) ->
    [].

get_forms(Epp) ->
    case epp:parse_erl_form(Epp) of
        {eof, _} -> [];
        {ok, Form} -> [Form|get_forms(Epp)];
        {error, ErrorInfo} -> get_forms(Epp) % Include file errors, etc
    end.
